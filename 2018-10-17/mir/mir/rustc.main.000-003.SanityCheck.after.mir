// MIR for `main`
// source = MirSource { def_id: DefId(0/0:4 ~ mir_example[317d]::main[0]), promoted: None }
// pass_name = SanityCheck
// disambiguator = after

fn main() -> (){
    let mut _0: ();                      // return place
    let mut _1: bool;
    let mut _2: &ComparisonResult;
    let _3: ComparisonResult;
    let mut _4: &ComparisonResult;
    let _5: ComparisonResult;
    let mut _6: ();
    let mut _7: ();
    let mut _8: std::fmt::Arguments<'_>;
    let mut _9: &[&str];
    let mut _10: &[&str; 1];
    let mut _11: &[&str; 1];
    let _12: [&str; 1];
    let mut _13: &str;
    let mut _14: &'static str;
    let mut _15: &[std::fmt::ArgumentV1<'_>];
    let mut _16: &[std::fmt::ArgumentV1<'_>; 0];
    let mut _17: &[std::fmt::ArgumentV1<'_>; 0];
    let _18: [std::fmt::ArgumentV1<'_>; 0];
    let mut _19: ();
    let mut _20: ();
    let mut _21: ();
    let mut _22: std::fmt::Arguments<'_>;
    let mut _23: &[&str];
    let mut _24: &[&str; 1];
    let mut _25: &[&str; 1];
    let _26: [&str; 1];
    let mut _27: &str;
    let mut _28: &'static str;
    let mut _29: &[std::fmt::ArgumentV1<'_>];
    let mut _30: &[std::fmt::ArgumentV1<'_>; 0];
    let mut _31: &[std::fmt::ArgumentV1<'_>; 0];
    let _32: [std::fmt::ArgumentV1<'_>; 0];
    let mut _33: ();

    bb0: {                              
        StorageLive(_1);                 // bb0[0]: scope 0 at mir-example.rs:19:8: 19:50
        StorageLive(_2);                 // bb0[1]: scope 0 at mir-example.rs:19:8: 19:21
        StorageLive(_3);                 // bb0[2]: scope 0 at mir-example.rs:19:8: 19:21
        _3 = const compare(const 2u32, const 3u32) -> [return: bb2, unwind: bb1]; // bb0[3]: scope 0 at mir-example.rs:19:8: 19:21
                                         // ty::Const
                                         // + ty: fn(u32, u32) -> ComparisonResult {compare}
                                         // + val: Scalar(Bits { size: 0, bits: 0 })
                                         // mir::Constant
                                         // + span: mir-example.rs:19:8: 19:15
                                         // + ty: fn(u32, u32) -> ComparisonResult {compare}
                                         // + literal: Const { ty: fn(u32, u32) -> ComparisonResult {compare}, val: Scalar(Bits { size: 0, bits: 0 }) }
                                         // ty::Const
                                         // + ty: u32
                                         // + val: Scalar(Bits { size: 4, bits: 2 })
                                         // mir::Constant
                                         // + span: mir-example.rs:19:16: 19:17
                                         // + ty: u32
                                         // + literal: Const { ty: u32, val: Scalar(Bits { size: 4, bits: 2 }) }
                                         // ty::Const
                                         // + ty: u32
                                         // + val: Scalar(Bits { size: 4, bits: 3 })
                                         // mir::Constant
                                         // + span: mir-example.rs:19:19: 19:20
                                         // + ty: u32
                                         // + literal: Const { ty: u32, val: Scalar(Bits { size: 4, bits: 3 }) }
    }

    bb1: {                               // cleanup
        resume;                          // bb1[0]: scope 0 at mir-example.rs:18:1: 24:2
    }

    bb2: {                              
        _2 = &_3;                        // bb2[0]: scope 0 at mir-example.rs:19:8: 19:21
        StorageLive(_4);                 // bb2[1]: scope 0 at mir-example.rs:19:25: 19:50
        StorageLive(_5);                 // bb2[2]: scope 0 at mir-example.rs:19:25: 19:50
        _5 = ComparisonResult::Smaller;  // bb2[3]: scope 0 at mir-example.rs:19:25: 19:50
        _4 = &_5;                        // bb2[4]: scope 0 at mir-example.rs:19:25: 19:50
        _1 = const std::cmp::PartialEq::eq(move _2, move _4) -> [return: bb3, unwind: bb1]; // bb2[5]: scope 0 at mir-example.rs:19:8: 19:50
                                         // ty::Const
                                         // + ty: for<'r, 's> fn(&'r ComparisonResult, &'s ComparisonResult) -> bool {<ComparisonResult as std::cmp::PartialEq>::eq}
                                         // + val: Scalar(Bits { size: 0, bits: 0 })
                                         // mir::Constant
                                         // + span: mir-example.rs:19:8: 19:50
                                         // + ty: for<'r, 's> fn(&'r ComparisonResult, &'s ComparisonResult) -> bool {<ComparisonResult as std::cmp::PartialEq>::eq}
                                         // + literal: Const { ty: for<'r, 's> fn(&'r ComparisonResult, &'s ComparisonResult) -> bool {<ComparisonResult as std::cmp::PartialEq>::eq}, val: Scalar(Bits { size: 0, bits: 0 }) }
    }

    bb3: {                              
        StorageDead(_4);                 // bb3[0]: scope 0 at mir-example.rs:19:49: 19:50
        StorageDead(_5);                 // bb3[1]: scope 0 at mir-example.rs:19:49: 19:50
        StorageDead(_2);                 // bb3[2]: scope 0 at mir-example.rs:19:49: 19:50
        StorageDead(_3);                 // bb3[3]: scope 0 at mir-example.rs:19:49: 19:50
        switchInt(move _1) -> [false: bb5, otherwise: bb4]; // bb3[4]: scope 0 at mir-example.rs:19:5: 23:6
    }

    bb4: {                              
        StorageLive(_8);                 // bb4[0]: scope 0 at <::std::macros::println macros>:2:29: 2:63
        StorageLive(_9);                 // bb4[1]: scope 0 at mir-example.rs:20:18: 20:34
        StorageLive(_10);                // bb4[2]: scope 0 at mir-example.rs:20:18: 20:34
        StorageLive(_11);                // bb4[3]: scope 0 at mir-example.rs:20:18: 20:34
        StorageLive(_12);                // bb4[4]: scope 0 at mir-example.rs:20:18: 20:34
        StorageLive(_13);                // bb4[5]: scope 0 at mir-example.rs:20:18: 20:34
        StorageLive(_14);                // bb4[6]: scope 0 at mir-example.rs:20:18: 20:34
        _14 = const "Science works!\n";  // bb4[7]: scope 0 at mir-example.rs:20:18: 20:34
                                         // ty::Const
                                         // + ty: &'static str
                                         // + val: ScalarPair(Ptr(Pointer { alloc_id: AllocId(0), offset: Size { raw: 0 }, tag: () }), Bits { size: 8, bits: 15 })
                                         // mir::Constant
                                         // + span: mir-example.rs:20:18: 20:34
                                         // + ty: &'static str
                                         // + literal: Const { ty: &'static str, val: ScalarPair(Ptr(Pointer { alloc_id: AllocId(0), offset: Size { raw: 0 }, tag: () }), Bits { size: 8, bits: 15 }) }
        _13 = &(*_14);                   // bb4[8]: scope 0 at mir-example.rs:20:18: 20:34
        _12 = [move _13];                // bb4[9]: scope 0 at mir-example.rs:20:18: 20:34
        StorageDead(_13);                // bb4[10]: scope 0 at mir-example.rs:20:33: 20:34
        _11 = &_12;                      // bb4[11]: scope 0 at mir-example.rs:20:18: 20:34
        _10 = &(*_11);                   // bb4[12]: scope 0 at mir-example.rs:20:18: 20:34
        _9 = move _10 as &[&str] (Unsize); // bb4[13]: scope 0 at mir-example.rs:20:18: 20:34
        StorageDead(_10);                // bb4[14]: scope 0 at mir-example.rs:20:33: 20:34
        StorageLive(_15);                // bb4[15]: scope 0 at mir-example.rs:20:18: 20:34
        StorageLive(_16);                // bb4[16]: scope 0 at mir-example.rs:20:18: 20:34
        StorageLive(_17);                // bb4[17]: scope 0 at mir-example.rs:20:18: 20:34
        StorageLive(_18);                // bb4[18]: scope 0 at mir-example.rs:20:18: 20:34
        StorageLive(_19);                // bb4[19]: scope 0 at mir-example.rs:20:18: 20:34
        _19 = ();                        // bb4[20]: scope 0 at mir-example.rs:20:18: 20:34
        FakeRead(ForMatchedPlace, _19);  // bb4[21]: scope 0 at mir-example.rs:20:18: 20:34
        falseEdges -> [real: bb7, imaginary: bb6]; // bb4[22]: scope 0 at mir-example.rs:20:18: 20:34
    }

    bb5: {                              
        StorageLive(_22);                // bb5[0]: scope 0 at <::std::macros::println macros>:2:29: 2:63
        StorageLive(_23);                // bb5[1]: scope 0 at mir-example.rs:22:18: 22:43
        StorageLive(_24);                // bb5[2]: scope 0 at mir-example.rs:22:18: 22:43
        StorageLive(_25);                // bb5[3]: scope 0 at mir-example.rs:22:18: 22:43
        StorageLive(_26);                // bb5[4]: scope 0 at mir-example.rs:22:18: 22:43
        StorageLive(_27);                // bb5[5]: scope 0 at mir-example.rs:22:18: 22:43
        StorageLive(_28);                // bb5[6]: scope 0 at mir-example.rs:22:18: 22:43
        _28 = const "Science needs a review!\n"; // bb5[7]: scope 0 at mir-example.rs:22:18: 22:43
                                         // ty::Const
                                         // + ty: &'static str
                                         // + val: ScalarPair(Ptr(Pointer { alloc_id: AllocId(1), offset: Size { raw: 0 }, tag: () }), Bits { size: 8, bits: 24 })
                                         // mir::Constant
                                         // + span: mir-example.rs:22:18: 22:43
                                         // + ty: &'static str
                                         // + literal: Const { ty: &'static str, val: ScalarPair(Ptr(Pointer { alloc_id: AllocId(1), offset: Size { raw: 0 }, tag: () }), Bits { size: 8, bits: 24 }) }
        _27 = &(*_28);                   // bb5[8]: scope 0 at mir-example.rs:22:18: 22:43
        _26 = [move _27];                // bb5[9]: scope 0 at mir-example.rs:22:18: 22:43
        StorageDead(_27);                // bb5[10]: scope 0 at mir-example.rs:22:42: 22:43
        _25 = &_26;                      // bb5[11]: scope 0 at mir-example.rs:22:18: 22:43
        _24 = &(*_25);                   // bb5[12]: scope 0 at mir-example.rs:22:18: 22:43
        _23 = move _24 as &[&str] (Unsize); // bb5[13]: scope 0 at mir-example.rs:22:18: 22:43
        StorageDead(_24);                // bb5[14]: scope 0 at mir-example.rs:22:42: 22:43
        StorageLive(_29);                // bb5[15]: scope 0 at mir-example.rs:22:18: 22:43
        StorageLive(_30);                // bb5[16]: scope 0 at mir-example.rs:22:18: 22:43
        StorageLive(_31);                // bb5[17]: scope 0 at mir-example.rs:22:18: 22:43
        StorageLive(_32);                // bb5[18]: scope 0 at mir-example.rs:22:18: 22:43
        StorageLive(_33);                // bb5[19]: scope 0 at mir-example.rs:22:18: 22:43
        _33 = ();                        // bb5[20]: scope 0 at mir-example.rs:22:18: 22:43
        FakeRead(ForMatchedPlace, _33);  // bb5[21]: scope 0 at mir-example.rs:22:18: 22:43
        falseEdges -> [real: bb11, imaginary: bb10]; // bb5[22]: scope 0 at mir-example.rs:22:18: 22:43
    }

    bb6: {                              
        unreachable;                     // bb6[0]: scope 0 at mir-example.rs:20:18: 20:34
    }

    bb7: {                              
        _18 = [];                        // bb7[0]: scope 0 at mir-example.rs:20:18: 20:34
        _17 = &_18;                      // bb7[1]: scope 0 at mir-example.rs:20:18: 20:34
        _16 = &(*_17);                   // bb7[2]: scope 0 at mir-example.rs:20:18: 20:34
        _15 = move _16 as &[std::fmt::ArgumentV1<'_>] (Unsize); // bb7[3]: scope 0 at mir-example.rs:20:18: 20:34
        StorageDead(_16);                // bb7[4]: scope 0 at mir-example.rs:20:33: 20:34
        _8 = const std::fmt::Arguments::new_v1(move _9, move _15) -> [return: bb8, unwind: bb1]; // bb7[5]: scope 0 at <::std::macros::println macros>:2:29: 2:63
                                         // ty::Const
                                         // + ty: fn(&[&str], &[std::fmt::ArgumentV1<'_>]) -> std::fmt::Arguments<'_> {std::fmt::Arguments<'_>::new_v1}
                                         // + val: Scalar(Bits { size: 0, bits: 0 })
                                         // mir::Constant
                                         // + span: <::std::macros::println macros>:2:29: 2:63
                                         // + ty: fn(&[&str], &[std::fmt::ArgumentV1<'_>]) -> std::fmt::Arguments<'_> {std::fmt::Arguments<'_>::new_v1}
                                         // + literal: Const { ty: fn(&[&str], &[std::fmt::ArgumentV1<'_>]) -> std::fmt::Arguments<'_> {std::fmt::Arguments<'_>::new_v1}, val: Scalar(Bits { size: 0, bits: 0 }) }
    }

    bb8: {                              
        StorageDead(_15);                // bb8[0]: scope 0 at <::std::macros::println macros>:2:62: 2:63
        StorageDead(_9);                 // bb8[1]: scope 0 at <::std::macros::println macros>:2:62: 2:63
        _7 = const std::io::_print(move _8) -> [return: bb9, unwind: bb1]; // bb8[2]: scope 0 at <::std::macros::println macros>:2:3: 2:65
                                         // ty::Const
                                         // + ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}
                                         // + val: Scalar(Bits { size: 0, bits: 0 })
                                         // mir::Constant
                                         // + span: <::std::macros::println macros>:2:3: 2:26
                                         // + ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}
                                         // + literal: Const { ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}, val: Scalar(Bits { size: 0, bits: 0 }) }
    }

    bb9: {                              
        StorageDead(_8);                 // bb9[0]: scope 0 at <::std::macros::println macros>:2:64: 2:65
        StorageDead(_17);                // bb9[1]: scope 0 at <::std::macros::println macros>:2:66: 2:67
        StorageDead(_18);                // bb9[2]: scope 0 at <::std::macros::println macros>:2:66: 2:67
        StorageDead(_19);                // bb9[3]: scope 0 at <::std::macros::println macros>:2:66: 2:67
        StorageDead(_11);                // bb9[4]: scope 0 at <::std::macros::println macros>:2:66: 2:67
        StorageDead(_12);                // bb9[5]: scope 0 at <::std::macros::println macros>:2:66: 2:67
        StorageDead(_14);                // bb9[6]: scope 0 at <::std::macros::println macros>:2:66: 2:67
        _6 = ();                         // bb9[7]: scope 0 at <::std::macros::println macros>:2:1: 2:69
        _0 = ();                         // bb9[8]: scope 0 at mir-example.rs:19:51: 21:6
        goto -> bb14;                    // bb9[9]: scope 0 at mir-example.rs:19:5: 23:6
    }

    bb10: {                             
        unreachable;                     // bb10[0]: scope 0 at mir-example.rs:22:18: 22:43
    }

    bb11: {                             
        _32 = [];                        // bb11[0]: scope 0 at mir-example.rs:22:18: 22:43
        _31 = &_32;                      // bb11[1]: scope 0 at mir-example.rs:22:18: 22:43
        _30 = &(*_31);                   // bb11[2]: scope 0 at mir-example.rs:22:18: 22:43
        _29 = move _30 as &[std::fmt::ArgumentV1<'_>] (Unsize); // bb11[3]: scope 0 at mir-example.rs:22:18: 22:43
        StorageDead(_30);                // bb11[4]: scope 0 at mir-example.rs:22:42: 22:43
        _22 = const std::fmt::Arguments::new_v1(move _23, move _29) -> [return: bb12, unwind: bb1]; // bb11[5]: scope 0 at <::std::macros::println macros>:2:29: 2:63
                                         // ty::Const
                                         // + ty: fn(&[&str], &[std::fmt::ArgumentV1<'_>]) -> std::fmt::Arguments<'_> {std::fmt::Arguments<'_>::new_v1}
                                         // + val: Scalar(Bits { size: 0, bits: 0 })
                                         // mir::Constant
                                         // + span: <::std::macros::println macros>:2:29: 2:63
                                         // + ty: fn(&[&str], &[std::fmt::ArgumentV1<'_>]) -> std::fmt::Arguments<'_> {std::fmt::Arguments<'_>::new_v1}
                                         // + literal: Const { ty: fn(&[&str], &[std::fmt::ArgumentV1<'_>]) -> std::fmt::Arguments<'_> {std::fmt::Arguments<'_>::new_v1}, val: Scalar(Bits { size: 0, bits: 0 }) }
    }

    bb12: {                             
        StorageDead(_29);                // bb12[0]: scope 0 at <::std::macros::println macros>:2:62: 2:63
        StorageDead(_23);                // bb12[1]: scope 0 at <::std::macros::println macros>:2:62: 2:63
        _21 = const std::io::_print(move _22) -> [return: bb13, unwind: bb1]; // bb12[2]: scope 0 at <::std::macros::println macros>:2:3: 2:65
                                         // ty::Const
                                         // + ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}
                                         // + val: Scalar(Bits { size: 0, bits: 0 })
                                         // mir::Constant
                                         // + span: <::std::macros::println macros>:2:3: 2:26
                                         // + ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}
                                         // + literal: Const { ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}, val: Scalar(Bits { size: 0, bits: 0 }) }
    }

    bb13: {                             
        StorageDead(_22);                // bb13[0]: scope 0 at <::std::macros::println macros>:2:64: 2:65
        StorageDead(_31);                // bb13[1]: scope 0 at <::std::macros::println macros>:2:66: 2:67
        StorageDead(_32);                // bb13[2]: scope 0 at <::std::macros::println macros>:2:66: 2:67
        StorageDead(_33);                // bb13[3]: scope 0 at <::std::macros::println macros>:2:66: 2:67
        StorageDead(_25);                // bb13[4]: scope 0 at <::std::macros::println macros>:2:66: 2:67
        StorageDead(_26);                // bb13[5]: scope 0 at <::std::macros::println macros>:2:66: 2:67
        StorageDead(_28);                // bb13[6]: scope 0 at <::std::macros::println macros>:2:66: 2:67
        _20 = ();                        // bb13[7]: scope 0 at <::std::macros::println macros>:2:1: 2:69
        _0 = ();                         // bb13[8]: scope 0 at mir-example.rs:21:12: 23:6
        goto -> bb14;                    // bb13[9]: scope 0 at mir-example.rs:19:5: 23:6
    }

    bb14: {                             
        StorageDead(_1);                 // bb14[0]: scope 0 at mir-example.rs:23:5: 23:6
        return;                          // bb14[1]: scope 0 at mir-example.rs:24:2: 24:2
    }
}
